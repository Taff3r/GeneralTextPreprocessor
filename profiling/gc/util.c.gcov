        -:    0:Source:src/util.c
        -:    0:Graph:profiling/gc/util.gcno
        -:    0:Data:profiling/gc/util.gcda
        -:    0:Runs:1
        -:    1:#include "util.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "definitions.h"
        -:    5:#include "globals.h"
        -:    6:#include <string.h>
    #####:    7:void uerror(const char* msg)
        -:    8:{
    #####:    9:    fprintf(stderr, KRED);
    #####:   10:    fprintf(stderr, msg);
    #####:   11:    fprintf(stderr, "Exiting \n");
    #####:   12:    fprintf(stderr, RST);
    #####:   13:    exit(1);
        -:   14:}
        -:   15:
    #####:   16:void uerror_no_exit(const char* msg)
        -:   17:{
        -:   18:
    #####:   19:    fprintf(stderr, KYLW);
    #####:   20:    fprintf(stderr, msg);
    #####:   21:    fprintf(stderr, RST);
    #####:   22:}
        -:   23:
    #####:   24:void formatted_uerror(const char* msg, const char* token)
        -:   25:{
    #####:   26:    char formatted[MAX_LINE_LENGTH];
    #####:   27:    char info[MAX_LINE_LENGTH];
    #####:   28:    sprintf(info, "%s:%lld ", current_file, line_number);
    #####:   29:    fprintf(stderr, KYLW UNDL);
    #####:   30:    fprintf(stderr, info);
    #####:   31:    fprintf(stderr, RST);
    #####:   32:    sprintf(formatted, msg, token);
    #####:   33:    uerror(formatted);
        -:   34:}
        -:   35:
       72:   36:void* xmalloc(size_t size)
        -:   37:{
       72:   38:    void* ptr = malloc(size);
       72:   39:    if(ptr == NULL)
    #####:   40:        exit(1);
       72:   41:    return ptr;
        -:   42:}
        -:   43:
      349:   44:void* xcalloc(size_t cnt, size_t size)
        -:   45:{
      349:   46:    void* ptr = calloc(cnt, size);
      346:   47:    if(ptr == NULL)
    #####:   48:        exit(1);
      349:   49:    return ptr;
        -:   50:}
        -:   51:
        3:   52:void extract_path_and_file(char* dst, char* dst_f, const char* path_to_file)
        -:   53:{
        3:   54:    int i;
        3:   55:    int len = strlen(path_to_file);
       29:   56:    for (i = len; i >= 0; --i)
       29:   57:        if(path_to_file[i] == '/')
        -:   58:            break;
        -:   59:    
        3:   60:    char* tmp = xcalloc(strlen(path_to_file) + 1, sizeof(char));
        3:   61:    strncpy(tmp, path_to_file, i);
        3:   62:    strcpy(dst, tmp);
        3:   63:    if (i != 0)
        3:   64:        strcpy(dst_f, path_to_file + i + 1);
        3:   65:    free(tmp);
        3:   66:}
